# Binary-search-problem-one
class Solution:
    def search( self,nums,target):
          low = 0
          high = len(nums) -1

          while low <= high:
            mid = (low + high)//2
            guess_one = nums[mid]
            if guess_one == target:
                return mid
            elif guess_one > target:

                high = mid -1 

                    
            else:
                 low = mid + 1
          return -1
                    
         
  
nums = [-1,0,3,5,9,12]
target = 9
solution = Solution()
result = solution.search(nums, target)
print(result)
def find_first(arr, target):
    low, high = 0, len(arr) - 1
    first_index = -1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            first_index = mid  # ✅ Potential first occurrence found
            high = mid - 1  # 🔍 Continue searching left
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return first_index

def find_last(arr, target):
    low, high = 0, len(arr) - 1
    last_index = -1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            last_index = mid  # ✅ Potential last occurrence found
            low = mid + 1  # 🔍 Continue searching right
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return last_index

# Example usage
arr = [1, 2, 2, 2, 3, 4, 5]
target = 2

first = find_first(arr, target)
last = find_last(arr, target)
# leetcode 69
class Solution(object):
    def mySqrt(self, x):
        low = 0
        high = x
        while low <= high:
            mid = (low + high)//2
            if mid * mid == x:
                return mid
            elif mid * mid > x:
                low = mid + 1
            else:
                high = mid -1
        return mid//2 -2
        
x = 4
solution = Solution()
result = solution.mySqrt(x)
print(result



print(f"First index = {first}, Last index = {last}")

