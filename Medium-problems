class Solution(object):
    def search(self, nums, target):
        left = 0
        right = len(nums) - 1
        while left <= right:
            mid = (left + right) // 2

            if nums[mid] == target:
                return mid

            # Check if the left half is sorted
            if nums[left] <= nums[mid]:
                # If target is in the sorted left half
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            # If the left half is not sorted, the right half must be sorted
            else:
                # If target is in the sorted right half
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1

        return -1

nums = [4, 5, 6, 7, 0, 1, 2]
target = 0
solution = Solution()
result = solution.search(nums, target)
print(result)
# The updated -question

class Solution():
    def searchRange(self, nums, target):
        def firstFind(nums, target):
            low = 0
            high = len(nums) - 1
            first = -1
            while low <= high:
                mid = (low + high) // 2
                guess = nums[mid]
                if guess == target:
                    first = mid
                    high = mid - 1  
                elif guess < target:
                    low = mid + 1
                else:
                    high = mid - 1
            return first

        def findLast(nums, target):
            low = 0
            high = len(nums) - 1
            last = -1
            while low <= high:
                mid = (low + high) // 2
                guess = nums[mid]
                if guess == target:
                    last = mid
                    low = mid + 1  
                elif guess < target:
                    low = mid + 1
                else:
                    high = mid - 1
            return last

        
        first_occurrence = firstFind(nums, target)
        if first_occurrence == -1:
            return [-1, -1]  
        last_occurrence = findLast(nums, target)
        return [first_occurrence, last_occurrence]

nums = [5, 7, 7, 8, 8, 10]
target = 8
solution = Solution()
result = solution.searchRange(nums, target)
print(result)  # 

                 
                    

